>>> matrix_mul = __import__('100-matrix_mul').matrix_mul

>>> matrix_mul([[1, 2], [3, 4]], [[1, 2], [34]])
Traceback (most recent call last):
	  ...
TypeError: each row of m_b must be of the same size

>>> matrix_mul([[1, 2], [34]], [[1, 2], [3, 4]])
Traceback (most recent call last):
	  ...
TypeError: each row of m_a must be of the same size

>>> matrix_mul(None, [[1, 2], [3, 4]])
Traceback (most recent call last):
	  ...
TypeError: m_a must be a list

>>> matrix_mul([[1, 2], [3, 4]], None)
Traceback (most recent call last):
	  ...
TypeError: m_b must be a list

>>> matrix_mul("Hello", None)
Traceback (most recent call last):
	  ...
TypeError: m_a must be a list

>>> matrix_mul([1, 2], [[3, 4]])
Traceback (most recent call last):
	  ...
TypeError: m_a must be a list of lists

>>> matrix_mul([[1, 2]], [3, 4])
Traceback (most recent call last):
	  ...
TypeError: m_b must be a list of lists

>>> matrix_mul([['1', 2]], [[3, 4]])
Traceback (most recent call last):
	  ...
TypeError: m_a should contain only integers or floats

>>> matrix_mul([[]], [[]])
Traceback (most recent call last):
	  ...
ValueError: m_a can't be empty

>>> matrix_mul([[2]], [])
Traceback (most recent call last):
	  ...
ValueError: m_b can't be empty

>>> matrix_mul([[1], [2]], [[2], [4]])
Traceback (most recent call last):
	  ...
ValueError: m_a and m_b can't be multiplied

>>> matrix_mul([[1, 2]], [[3, 4], [5, 6]])
[[13, 16]]

>>> matrix_mul([[1, 2], [1, 2], [1, 2], [1, 2], [1, 2]], [[1, 2, 3, 4, 5], [3, 4, 3, 4, 5]])
[[7, 10, 9, 12, 15], [7, 10, 9, 12, 15], [7, 10, 9, 12, 15], [7, 10, 9, 12, 15], [7, 10, 9, 12, 15]]
