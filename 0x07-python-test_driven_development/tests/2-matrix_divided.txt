>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

>>> matrix_divided(["foo", "bar"], 2)
Traceback (most recent call last):
	  ...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided([[1, 2, 3], [4, 5, 6]], 3)
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

>>> matrix_divided([[1, 2, 3], [4, 5, 6]], 0)
Traceback (most recent call last):
	       ...
ZeroDivisionError: division by zero

>>> matrix_divided ("Srsr", 5)
Traceback (most recent call last):
	       ...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided([[1, 2, 3], [4, 5]], 3)
Traceback (most recent call last):
	       ...
TypeError: Each row of the matrix must have the same size

>>> matrix_divided([[1, 2, 3], [4, 5], "strs"], 5)
Traceback (most recent call last):
    		...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided([[1, 2, 3], [4, 5, 6]], 's')
Traceback (most recent call last):
	       ...
TypeError: div must be a number

>>> matrix_divided([[1, "s", 3], [4, 5, "c"]], 3)
Traceback (most recent call last):
	       ...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided([1, 2, 3], 3)
Traceback (most recent call last):
	       ...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided([[1, 2, float('inf')], [4, 5, 6]], 3)
[[0.33, 0.67, 3.33], [1.33, 1.67, 2.0]]

>>> matrix_divided([[1, 2, 3], [4, 5, float('nan')]], 3)
[[0.33, 0.67, 1.0], [1.33, 1.67, 3.33]]


>>> matrix_divided([[1, 2, 3], [4, 5, 6]], float('nan'))
[[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]]

>>> matrix_divided([[1, 2, 3], [4, 5, 6]], float('inf'))
[[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]]

>>> matrix_divided()
[[1.0]]

>>> matrix_divided([[1, 2, 3], [4, 5, 6]])
[[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]
